{"ast":null,"code":"import recovery from \"@/logic/recovery\";\nexport default {\n  namespace: true,\n  state: () => {\n    return {\n      recovery: {},\n      change: {}\n    };\n  },\n  mutations: {\n    addToken(state, {\n      email,\n      token\n    }) {\n      state.recovery[email] = token;\n    },\n\n    deleteToken(state, email) {\n      delete state.recovery[email];\n    },\n\n    addChangeId(state, {\n      changeId,\n      email\n    }) {\n      state.change[changeId] = email;\n    }\n\n  },\n  actions: {\n    async makeForgetRequest({\n      commit\n    }, email) {\n      const res = await recovery.forgotPasswordRequest(email);\n\n      if (res && res.status === 200) {\n        commit(\"addToken\", {\n          email: res.data.email,\n          token: res.data.resetToken\n        });\n      }\n\n      console.log(res);\n      return res.status;\n    },\n\n    storeChangeId({\n      commit,\n      state\n    }, {\n      changeId,\n      email\n    }) {\n      if (email in state.change) {\n        return false;\n      }\n\n      commit(\"addChangeId\", {\n        changeId: changeId,\n        email: email\n      });\n      return true;\n    },\n\n    async changePassword({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      const res = await recovery.changePasswordRequest({\n        email,\n        password\n      });\n\n      if (res && res.status === 200) {\n        commit(\"deleteToken\", email);\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  getters: {\n    getTokenByEmail: state => email => {\n      return state.recovery[email];\n    },\n    getEmailByChangeId: state => changeId => {\n      return state.change[changeId];\n    }\n  }\n};","map":{"version":3,"names":["recovery","namespace","state","change","mutations","addToken","email","token","deleteToken","addChangeId","changeId","actions","makeForgetRequest","commit","res","forgotPasswordRequest","status","data","resetToken","console","log","storeChangeId","changePassword","password","changePasswordRequest","getters","getTokenByEmail","getEmailByChangeId"],"sources":["/Users/ahmed/Documents/projects/vulnerable_laravel_app/frontend/src/modules/recovery.js"],"sourcesContent":["import recovery from \"@/logic/recovery\";\n\nexport default {\n  namespace: true,\n  state: () => {\n    return {\n      recovery: {},\n      change: {},\n    };\n  },\n  mutations: {\n    addToken(state, { email, token }) {\n      state.recovery[email] = token;\n    },\n    deleteToken(state, email) {\n      delete state.recovery[email];\n    },\n    addChangeId(state, { changeId, email }) {\n      state.change[changeId] = email;\n    },\n  },\n  actions: {\n    async makeForgetRequest({ commit }, email) {\n      const res = await recovery.forgotPasswordRequest(email);\n\n      if (res && res.status === 200) {\n        commit(\"addToken\", {\n          email: res.data.email,\n          token: res.data.resetToken,\n        });\n      }\n      console.log(res);\n      return res.status;\n    },\n    storeChangeId({ commit, state }, { changeId, email }) {\n      if (email in state.change) {\n        return false;\n      }\n\n      commit(\"addChangeId\", {\n        changeId: changeId,\n        email: email,\n      });\n\n      return true;\n    },\n    async changePassword({ commit }, { email, password }) {\n      const res = await recovery.changePasswordRequest({ email, password });\n\n      if (res && res.status === 200) {\n        commit(\"deleteToken\", email);\n        return true;\n      }\n\n      return false;\n    },\n  },\n  getters: {\n    getTokenByEmail: (state) => (email) => {\n      return state.recovery[email];\n    },\n    getEmailByChangeId: (state) => (changeId) => {\n      return state.change[changeId];\n    },\n  },\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAEA,eAAe;EACbC,SAAS,EAAE,IADE;EAEbC,KAAK,EAAE,MAAM;IACX,OAAO;MACLF,QAAQ,EAAE,EADL;MAELG,MAAM,EAAE;IAFH,CAAP;EAID,CAPY;EAQbC,SAAS,EAAE;IACTC,QAAQ,CAACH,KAAD,EAAQ;MAAEI,KAAF;MAASC;IAAT,CAAR,EAA0B;MAChCL,KAAK,CAACF,QAAN,CAAeM,KAAf,IAAwBC,KAAxB;IACD,CAHQ;;IAITC,WAAW,CAACN,KAAD,EAAQI,KAAR,EAAe;MACxB,OAAOJ,KAAK,CAACF,QAAN,CAAeM,KAAf,CAAP;IACD,CANQ;;IAOTG,WAAW,CAACP,KAAD,EAAQ;MAAEQ,QAAF;MAAYJ;IAAZ,CAAR,EAA6B;MACtCJ,KAAK,CAACC,MAAN,CAAaO,QAAb,IAAyBJ,KAAzB;IACD;;EATQ,CARE;EAmBbK,OAAO,EAAE;IACP,MAAMC,iBAAN,CAAwB;MAAEC;IAAF,CAAxB,EAAoCP,KAApC,EAA2C;MACzC,MAAMQ,GAAG,GAAG,MAAMd,QAAQ,CAACe,qBAAT,CAA+BT,KAA/B,CAAlB;;MAEA,IAAIQ,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAA1B,EAA+B;QAC7BH,MAAM,CAAC,UAAD,EAAa;UACjBP,KAAK,EAAEQ,GAAG,CAACG,IAAJ,CAASX,KADC;UAEjBC,KAAK,EAAEO,GAAG,CAACG,IAAJ,CAASC;QAFC,CAAb,CAAN;MAID;;MACDC,OAAO,CAACC,GAAR,CAAYN,GAAZ;MACA,OAAOA,GAAG,CAACE,MAAX;IACD,CAZM;;IAaPK,aAAa,CAAC;MAAER,MAAF;MAAUX;IAAV,CAAD,EAAoB;MAAEQ,QAAF;MAAYJ;IAAZ,CAApB,EAAyC;MACpD,IAAIA,KAAK,IAAIJ,KAAK,CAACC,MAAnB,EAA2B;QACzB,OAAO,KAAP;MACD;;MAEDU,MAAM,CAAC,aAAD,EAAgB;QACpBH,QAAQ,EAAEA,QADU;QAEpBJ,KAAK,EAAEA;MAFa,CAAhB,CAAN;MAKA,OAAO,IAAP;IACD,CAxBM;;IAyBP,MAAMgB,cAAN,CAAqB;MAAET;IAAF,CAArB,EAAiC;MAAEP,KAAF;MAASiB;IAAT,CAAjC,EAAsD;MACpD,MAAMT,GAAG,GAAG,MAAMd,QAAQ,CAACwB,qBAAT,CAA+B;QAAElB,KAAF;QAASiB;MAAT,CAA/B,CAAlB;;MAEA,IAAIT,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAA1B,EAA+B;QAC7BH,MAAM,CAAC,aAAD,EAAgBP,KAAhB,CAAN;QACA,OAAO,IAAP;MACD;;MAED,OAAO,KAAP;IACD;;EAlCM,CAnBI;EAuDbmB,OAAO,EAAE;IACPC,eAAe,EAAGxB,KAAD,IAAYI,KAAD,IAAW;MACrC,OAAOJ,KAAK,CAACF,QAAN,CAAeM,KAAf,CAAP;IACD,CAHM;IAIPqB,kBAAkB,EAAGzB,KAAD,IAAYQ,QAAD,IAAc;MAC3C,OAAOR,KAAK,CAACC,MAAN,CAAaO,QAAb,CAAP;IACD;EANM;AAvDI,CAAf"},"metadata":{},"sourceType":"module"}