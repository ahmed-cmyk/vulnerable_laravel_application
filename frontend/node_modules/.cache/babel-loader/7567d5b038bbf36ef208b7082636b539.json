{"ast":null,"code":"import recovery from \"@/logic/recovery\";\nexport default {\n  namespace: true,\n  state: () => {\n    return {\n      recovery: {},\n      change: {}\n    };\n  },\n  mutations: {\n    addToken(state, {\n      email,\n      token\n    }) {\n      state.recovery[email] = token;\n    },\n\n    addChangeId(state, {\n      changeId,\n      email\n    }) {\n      state.change[changeId] = email;\n    }\n\n  },\n  actions: {\n    async makeForgetRequest({\n      commit\n    }, email) {\n      const res = await recovery.forgotPasswordRequest(email);\n\n      if (res && res.status === 200) {\n        commit('addToken', {\n          email: res.data.email,\n          token: res.data.resetToken\n        });\n      }\n\n      return res.status;\n    },\n\n    storeChangeId({\n      commit,\n      state\n    }, {\n      changeId,\n      email\n    }) {\n      if (email in state.change) {\n        return false;\n      }\n\n      commit('addChangeId', {\n        changeId: changeId,\n        email: email\n      });\n      return true;\n    },\n\n    async changePasswordRequest(context, {\n      email,\n      password\n    }) {}\n\n  },\n  getters: {\n    getTokenByEmail: state => email => {\n      return state.recovery[email];\n    },\n    getEmailByChangeId: state => changeId => {\n      return state.change[changeId];\n    }\n  }\n};","map":{"version":3,"names":["recovery","namespace","state","change","mutations","addToken","email","token","addChangeId","changeId","actions","makeForgetRequest","commit","res","forgotPasswordRequest","status","data","resetToken","storeChangeId","changePasswordRequest","context","password","getters","getTokenByEmail","getEmailByChangeId"],"sources":["/Users/ahmed/Documents/projects/vulnerable_node_app/frontend/src/modules/recovery.js"],"sourcesContent":["import recovery from \"@/logic/recovery\"\n\nexport default {\n    namespace: true,\n    state: () => {\n        return {\n            recovery: {},\n            change: {}\n        }\n    },\n    mutations: {\n        addToken(state, { email, token }) {\n            state.recovery[email] = token\n        },\n        addChangeId(state, { changeId, email }) {\n            state.change[changeId] = email\n        }\n    },\n    actions: {\n        async makeForgetRequest({ commit }, email) {\n            const res = await recovery.forgotPasswordRequest(email)\n\n            if(res && res.status === 200) {\n                commit('addToken', {\n                    email: res.data.email,\n                    token: res.data.resetToken\n                })\n            }\n\n            return res.status\n        },\n        storeChangeId({ commit, state }, { changeId, email }) {\n            if(email in state.change) {\n                return false\n            }\n\n            commit('addChangeId', { \n                changeId: changeId, \n                email: email\n            })\n            \n            return true\n        },\n        async changePasswordRequest(context, { email, password }) {\n            \n        }\n    },\n    getters: {\n        getTokenByEmail: (state) => (email) => {\n            return state.recovery[email]\n        },\n        getEmailByChangeId: (state) => (changeId) => {\n            return state.change[changeId]\n        }\n    }\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAEA,eAAe;EACXC,SAAS,EAAE,IADA;EAEXC,KAAK,EAAE,MAAM;IACT,OAAO;MACHF,QAAQ,EAAE,EADP;MAEHG,MAAM,EAAE;IAFL,CAAP;EAIH,CAPU;EAQXC,SAAS,EAAE;IACPC,QAAQ,CAACH,KAAD,EAAQ;MAAEI,KAAF;MAASC;IAAT,CAAR,EAA0B;MAC9BL,KAAK,CAACF,QAAN,CAAeM,KAAf,IAAwBC,KAAxB;IACH,CAHM;;IAIPC,WAAW,CAACN,KAAD,EAAQ;MAAEO,QAAF;MAAYH;IAAZ,CAAR,EAA6B;MACpCJ,KAAK,CAACC,MAAN,CAAaM,QAAb,IAAyBH,KAAzB;IACH;;EANM,CARA;EAgBXI,OAAO,EAAE;IACL,MAAMC,iBAAN,CAAwB;MAAEC;IAAF,CAAxB,EAAoCN,KAApC,EAA2C;MACvC,MAAMO,GAAG,GAAG,MAAMb,QAAQ,CAACc,qBAAT,CAA+BR,KAA/B,CAAlB;;MAEA,IAAGO,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAAzB,EAA8B;QAC1BH,MAAM,CAAC,UAAD,EAAa;UACfN,KAAK,EAAEO,GAAG,CAACG,IAAJ,CAASV,KADD;UAEfC,KAAK,EAAEM,GAAG,CAACG,IAAJ,CAASC;QAFD,CAAb,CAAN;MAIH;;MAED,OAAOJ,GAAG,CAACE,MAAX;IACH,CAZI;;IAaLG,aAAa,CAAC;MAAEN,MAAF;MAAUV;IAAV,CAAD,EAAoB;MAAEO,QAAF;MAAYH;IAAZ,CAApB,EAAyC;MAClD,IAAGA,KAAK,IAAIJ,KAAK,CAACC,MAAlB,EAA0B;QACtB,OAAO,KAAP;MACH;;MAEDS,MAAM,CAAC,aAAD,EAAgB;QAClBH,QAAQ,EAAEA,QADQ;QAElBH,KAAK,EAAEA;MAFW,CAAhB,CAAN;MAKA,OAAO,IAAP;IACH,CAxBI;;IAyBL,MAAMa,qBAAN,CAA4BC,OAA5B,EAAqC;MAAEd,KAAF;MAASe;IAAT,CAArC,EAA0D,CAEzD;;EA3BI,CAhBE;EA6CXC,OAAO,EAAE;IACLC,eAAe,EAAGrB,KAAD,IAAYI,KAAD,IAAW;MACnC,OAAOJ,KAAK,CAACF,QAAN,CAAeM,KAAf,CAAP;IACH,CAHI;IAILkB,kBAAkB,EAAGtB,KAAD,IAAYO,QAAD,IAAc;MACzC,OAAOP,KAAK,CAACC,MAAN,CAAaM,QAAb,CAAP;IACH;EANI;AA7CE,CAAf"},"metadata":{},"sourceType":"module"}